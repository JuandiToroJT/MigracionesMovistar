/*
 * API Migraciones
 *
 * API para el proyecto de migraciones de movistar a tigo o claro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juand.blandont@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ProyectoMigracionMovistarApi.Attributes;
using ProyectoMigracionMovistarApi.Bussines;
using ProyectoMigracionMovistarApi.Entities;
using ProyectoMigracionMovistarApi.Models;
using ProyectoMigracionMovistarApi.Utils;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

namespace ProyectoMigracionMovistarApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsuarioApi : APIUtil
    {
        private readonly IDbContextFactory<MigracionDbContext> _dbContextFactory;
        public UsuarioApi(IDbContextFactory<MigracionDbContext> dbContextFactory, IConfiguration configuration)
        {
            _dbContextFactory = dbContextFactory;
        }

        /// <summary>
        /// Autenticar usuario
        /// </summary>
        /// <remarks>Valida al usuario que inicia sesión. </remarks>
        /// <param name="body">Datos de la autenticación</param>
        /// <response code="200">Resultado de la autenticación</response>
        /// <response code="400">Error en la petición</response>
        [HttpPost]
        [Route("usuario/autenticar")]
        [ValidateModelState]
        [SwaggerOperation("AutenticarUsuario")]
        [SwaggerResponse(statusCode: 200, type: typeof(RespuestaTransaccion), description: "Resultado de la autenticación")]
        [SwaggerResponse(statusCode: 400, type: typeof(MensajeErrorItem), description: "Error en la petición")]
        public virtual IActionResult AutenticarUsuario([FromBody] DatosAutenticacion body)
        {
            try
            {
                UsuarioBL reglasNegocio = new UsuarioBL(_dbContextFactory);
                RespuestaTransaccion respuesta = reglasNegocio.AutenticarUsuario(body);
                respuesta.Url = new Uri(Request.GetDisplayUrl()).ToString();
                return new ObjectResult(respuesta);
            }
            catch (Exception ex)
            {
                return BadRequest(AdministrarExcepcion(ex));
            }
        }

        /// <summary>
        /// Registrar usuario
        /// </summary>
        /// <remarks>Registra al usuario. </remarks>
        /// <param name="body">Datos del usuario</param>
        /// <response code="200">Resultado del registro</response>
        /// <response code="400">Error en la petición</response>
        [HttpPost]
        [Route("usuario/registrar")]
        [ValidateModelState]
        [SwaggerOperation("RegistrarUsuario")]
        [SwaggerResponse(statusCode: 200, type: typeof(RespuestaTransaccion), description: "Resultado del registro")]
        [SwaggerResponse(statusCode: 400, type: typeof(MensajeErrorItem), description: "Error en la petición")]
        public virtual IActionResult RegistrarUsuario([FromBody] DatosUsuarioRegistrar body)
        {
            try
            {
                UsuarioBL reglasNegocio = new UsuarioBL(_dbContextFactory);
                RespuestaTransaccion respuesta = reglasNegocio.RegistrarUsuario(body);
                respuesta.Url = new Uri(Request.GetDisplayUrl()).ToString();
                return new ObjectResult(respuesta);
            }
            catch (Exception ex)
            {
                return BadRequest(AdministrarExcepcion(ex));
            }
        }
    }
}
