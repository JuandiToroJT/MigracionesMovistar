/*
 * API Migraciones
 *
 * API para el proyecto de migraciones de movistar a tigo o claro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juand.blandont@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ProyectoMigracionMovistarApi.Attributes;
using ProyectoMigracionMovistarApi.Bussines;
using ProyectoMigracionMovistarApi.Entities;
using ProyectoMigracionMovistarApi.Models;
using ProyectoMigracionMovistarApi.Utils;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

namespace ProyectoMigracionMovistarApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProcesoApi : APIUtil
    {
        private readonly IDbContextFactory<MigracionDbContext> _dbContextFactory;
        private readonly string baseDatosExterna;
        public ProcesoApi(IDbContextFactory<MigracionDbContext> dbContextFactory, IConfiguration configuration)
        {
            _dbContextFactory = dbContextFactory;
            baseDatosExterna = configuration.GetConnectionString("MySqlExterna");
        }

        /// <summary>
        /// Obtiene el listado de procesos realizados los cuales son migraciones y cargues
        /// </summary>
        /// <remarks>Retorna todos los procesos de migración y cargues realizados, con su estado y métricas. </remarks>
        /// <param name="tipo">Tipo del proceso para filtrar por Migracion ó Cargue, si se envía vacío retorna todos</param>
        /// <response code="200">Lista de procesos</response>
        /// <response code="400">Error al recuperar la información</response>
        [HttpGet]
        [Route("procesos")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerProcesos")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProcesoResumen>), description: "Lista de procesos")]
        [SwaggerResponse(statusCode: 400, type: typeof(MensajeErrorItem), description: "Error al recuperar la información")]
        public virtual IActionResult ObtenerProcesos([FromQuery] string tipo = null)
        {
            try
            {
                ProcesoBL reglasNegocio = new ProcesoBL(_dbContextFactory);
                List<ProcesoResumen> respuesta = reglasNegocio.ObtenerProcesos(tipo);
                return new ObjectResult(respuesta);
            }
            catch (Exception ex)
            {
                return BadRequest(AdministrarExcepcion(ex));
            }
        }

        /// <summary>
        /// Obtiene el detalle de los procesos realizados los cuales son migraciones y cargues
        /// </summary>
        /// <remarks>Retorna todos los registros de procesos de migración y cargues realizados. </remarks>
        /// <param name="idProceso">Id del proceso</param>
        /// <param name="tipo">Tipo del proceso para filtrar por Migracion ó Cargue, si se envía vacío retorna todos</param>
        /// <response code="200">Lista de detalle</response>
        /// <response code="400">Error al recuperar la información</response>
        [HttpGet]
        [Route("procesos/detalle")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerDetalleProcesos")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DetalleProcesoItem>), description: "Lista de detalle")]
        [SwaggerResponse(statusCode: 400, type: typeof(MensajeErrorItem), description: "Error al recuperar la información")]
        public virtual IActionResult ObtenerDetalleProcesos([FromQuery] int? idProceso = null, [FromQuery] string tipo = null)
        {
            try
            {
                ProcesoBL reglasNegocio = new ProcesoBL(_dbContextFactory);
                List<DetalleProcesoItem> respuesta = reglasNegocio.ObtenerDetalleProcesos(idProceso, tipo);
                return new ObjectResult(respuesta);
            }
            catch (Exception ex)
            {
                return BadRequest(AdministrarExcepcion(ex));
            }
        }

        /// <summary>
        /// Genera una migración manual
        /// </summary>
        /// <remarks>Genera una migración manual ya sea por parte de un cliente o de un administrador </remarks>
        /// <param name="usuario">Identificación del usuario que llama la función</param>
        /// <param name="body">Datos para la migración</param>
        /// <response code="200">Respuesta del proceso</response>
        /// <response code="400">Inconsistencia de la petición</response>
        [HttpPost]
        [Route("migraciones/{usuario}/manual")]
        [ValidateModelState]
        [SwaggerOperation("RealizarMigracionManual")]
        [SwaggerResponse(statusCode: 200, type: typeof(RespuestaTransaccion), description: "Respuesta del proceso")]
        [SwaggerResponse(statusCode: 400, type: typeof(MensajeErrorItem), description: "Inconsistencia de la petición")]
        public virtual IActionResult RealizarMigracionManual([FromRoute][Required] string usuario, [FromBody] DatosMigracionManual body)
        {
            try
            {
                ProcesoBL reglasNegocio = new ProcesoBL(_dbContextFactory);
                RespuestaTransaccion respuesta = reglasNegocio.RealizarMigracionManual(usuario, body);
                respuesta.Url = new Uri(Request.GetDisplayUrl()).ToString();
                return new ObjectResult(respuesta);
            }
            catch (Exception ex)
            {
                return BadRequest(AdministrarExcepcion(ex));
            }
        }

        /// <summary>
        /// Realiza la migración masiva de usuarios
        /// </summary>
        /// <remarks>Procesa la migración masiva de usuarios que ya se hayan cargado en la base de datos. </remarks>
        /// <param name="usuario">Identificación del usuario que inicia el proceso</param>
        /// <response code="200">Resultado de la migración masiva</response>
        /// <response code="400">Error en la petición</response>
        [HttpPost]
        [Route("migraciones/{usuario}/masiva")]
        [ValidateModelState]
        [SwaggerOperation("RealizarMigracionMasiva")]
        [SwaggerResponse(statusCode: 200, type: typeof(RespuestaTransaccion), description: "Resultado de la migración masiva")]
        [SwaggerResponse(statusCode: 400, type: typeof(MensajeErrorItem), description: "Error en la petición")]
        public virtual async Task<IActionResult> RealizarMigracionMasiva([FromRoute][Required] string usuario)
        {
            try
            {
                ProcesoBL reglasNegocio = new ProcesoBL(_dbContextFactory);
                RespuestaTransaccion respuesta = await reglasNegocio.RealizarMigracionMasiva(usuario);
                respuesta.Url = new Uri(Request.GetDisplayUrl()).ToString();
                return new ObjectResult(respuesta);
            }
            catch (Exception ex)
            {
                return BadRequest(AdministrarExcepcion(ex));
            }
        }

        /// <summary>
        /// Realiza el cargue de usuarios masivo
        /// </summary>
        /// <remarks>Procesa el cargue masivo de usuarios desde el archivo ingresado y/o desde la base de datos externa de la compañía. </remarks>
        /// <param name="usuario">Identificación del usuario que inicia el proceso</param>
        /// <param name="body">Datos del cargue</param>
        /// <response code="200">Resultado del cargue masivo</response>
        /// <response code="400">Error en la petición</response>
        [HttpPost]
        [Route("cargue/{usuario}/masivo")]
        [ValidateModelState]
        [SwaggerOperation("RealizarCargueUsuarios")]
        [SwaggerResponse(statusCode: 200, type: typeof(RespuestaTransaccion), description: "Resultado del cargue masivo")]
        [SwaggerResponse(statusCode: 400, type: typeof(MensajeErrorItem), description: "Error en la petición")]
        public virtual async Task<IActionResult> RealizarCargueUsuarios([FromRoute][Required] string usuario, [FromBody] DatosCargueMasivo body)
        {
            try
            {
                ProcesoBL reglasNegocio = new ProcesoBL(_dbContextFactory);
                RespuestaTransaccion respuesta = await reglasNegocio.RealizarCargueUsuarios(usuario, body, baseDatosExterna);
                respuesta.Url = new Uri(Request.GetDisplayUrl()).ToString();
                return new ObjectResult(respuesta);
            }
            catch (Exception ex)
            {
                return BadRequest(AdministrarExcepcion(ex));
            }
        }
    }
}
