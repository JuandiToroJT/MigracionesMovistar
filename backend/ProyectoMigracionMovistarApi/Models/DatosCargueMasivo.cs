/*
 * API Migraciones
 *
 * API para el proyecto de migraciones de movistar a tigo o claro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juand.blandont@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ProyectoMigracionMovistarApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatosCargueMasivo : IEquatable<DatosCargueMasivo>
    { 
        /// <summary>
        /// Archivo con los datos
        /// </summary>
        /// <value>Archivo con los datos</value>

        [DataMember(Name="archivo")]
        public byte[]? Archivo { get; set; }

        /// <summary>
        /// Formato
        /// </summary>
        /// <value>Formato</value>

        [DataMember(Name="formato")]
        public string? Formato { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatosCargueMasivo {\n");
            sb.Append("  Archivo: ").Append(Archivo).Append("\n");
            sb.Append("  Formato: ").Append(Formato).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatosCargueMasivo)obj);
        }

        /// <summary>
        /// Returns true if DatosCargueMasivo instances are equal
        /// </summary>
        /// <param name="other">Instance of DatosCargueMasivo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatosCargueMasivo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Archivo == other.Archivo ||
                    Archivo != null &&
                    Archivo.Equals(other.Archivo)
                ) && 
                (
                    Formato == other.Formato ||
                    Formato != null &&
                    Formato.Equals(other.Formato)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Archivo != null)
                    hashCode = hashCode * 59 + Archivo.GetHashCode();
                    if (Formato != null)
                    hashCode = hashCode * 59 + Formato.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatosCargueMasivo left, DatosCargueMasivo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatosCargueMasivo left, DatosCargueMasivo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
