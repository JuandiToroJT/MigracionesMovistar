/*
 * API Migraciones
 *
 * API para el proyecto de migraciones de movistar a tigo o claro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juand.blandont@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ProyectoMigracionMovistarApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatosUsuarioRegistrar : IEquatable<DatosUsuarioRegistrar>
    { 
        /// <summary>
        /// Nombre del usuario
        /// </summary>
        /// <value>Nombre del usuario</value>

        [DataMember(Name="nombre")]
        public string Nombre { get; set; }

        /// <summary>
        /// Correo del usuario
        /// </summary>
        /// <value>Correo del usuario</value>

        [DataMember(Name="correo")]
        public string Correo { get; set; }

        /// <summary>
        /// Celular del usuario
        /// </summary>
        /// <value>Celular del usuario</value>

        [DataMember(Name="celular")]
        public string Celular { get; set; }

        /// <summary>
        /// Tipo identificaci贸n del usuario
        /// </summary>
        /// <value>Tipo identificaci贸n del usuario</value>

        [DataMember(Name="tipoIdentificacion")]
        public string TipoIdentificacion { get; set; }

        /// <summary>
        /// Identificaci贸n del usuario
        /// </summary>
        /// <value>Identificaci贸n del usuario</value>

        [DataMember(Name="identificacion")]
        public string Identificacion { get; set; }

        /// <summary>
        /// Clave del usuario
        /// </summary>
        /// <value>Clave del usuario</value>

        [DataMember(Name="clave")]
        public string Clave { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatosUsuarioRegistrar {\n");
            sb.Append("  Nombre: ").Append(Nombre).Append("\n");
            sb.Append("  Correo: ").Append(Correo).Append("\n");
            sb.Append("  Celular: ").Append(Celular).Append("\n");
            sb.Append("  TipoIdentificacion: ").Append(TipoIdentificacion).Append("\n");
            sb.Append("  Identificacion: ").Append(Identificacion).Append("\n");
            sb.Append("  Clave: ").Append(Clave).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatosUsuarioRegistrar)obj);
        }

        /// <summary>
        /// Returns true if DatosUsuarioRegistrar instances are equal
        /// </summary>
        /// <param name="other">Instance of DatosUsuarioRegistrar to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatosUsuarioRegistrar other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Nombre == other.Nombre ||
                    Nombre != null &&
                    Nombre.Equals(other.Nombre)
                ) && 
                (
                    Correo == other.Correo ||
                    Correo != null &&
                    Correo.Equals(other.Correo)
                ) && 
                (
                    Celular == other.Celular ||
                    Celular != null &&
                    Celular.Equals(other.Celular)
                ) && 
                (
                    TipoIdentificacion == other.TipoIdentificacion ||
                    TipoIdentificacion != null &&
                    TipoIdentificacion.Equals(other.TipoIdentificacion)
                ) && 
                (
                    Identificacion == other.Identificacion ||
                    Identificacion != null &&
                    Identificacion.Equals(other.Identificacion)
                ) && 
                (
                    Clave == other.Clave ||
                    Clave != null &&
                    Clave.Equals(other.Clave)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Nombre != null)
                    hashCode = hashCode * 59 + Nombre.GetHashCode();
                    if (Correo != null)
                    hashCode = hashCode * 59 + Correo.GetHashCode();
                    if (Celular != null)
                    hashCode = hashCode * 59 + Celular.GetHashCode();
                    if (TipoIdentificacion != null)
                    hashCode = hashCode * 59 + TipoIdentificacion.GetHashCode();
                    if (Identificacion != null)
                    hashCode = hashCode * 59 + Identificacion.GetHashCode();
                    if (Clave != null)
                    hashCode = hashCode * 59 + Clave.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatosUsuarioRegistrar left, DatosUsuarioRegistrar right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatosUsuarioRegistrar left, DatosUsuarioRegistrar right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
