/*
 * API Migraciones
 *
 * API para el proyecto de migraciones de movistar a tigo o claro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juand.blandont@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ProyectoMigracionMovistarApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DetalleProcesoItem : IEquatable<DetalleProcesoItem>
    { 
        /// <summary>
        /// ID del proceso
        /// </summary>
        /// <value>ID del proceso</value>

        [DataMember(Name="idProceso")]
        public int? IdProceso { get; set; }

        /// <summary>
        /// Tipo origen
        /// </summary>
        /// <value>Tipo origen</value>

        [DataMember(Name="tipo")]
        public string Tipo { get; set; }

        /// <summary>
        /// Estado del proceso (APL, ERR, DUP)
        /// </summary>
        /// <value>Estado del proceso (APL, ERR, DUP)</value>

        [DataMember(Name="estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Fecha de finalización del proceso
        /// </summary>
        /// <value>Fecha de finalización del proceso</value>

        [DataMember(Name="fecha")]
        public DateTime? Fecha { get; set; }

        /// <summary>
        /// Notas del proceso
        /// </summary>
        /// <value>Notas del proceso</value>

        [DataMember(Name="notas")]
        public string Notas { get; set; }

        /// <summary>
        /// Tipo de identificación del cliente
        /// </summary>
        /// <value>Tipo de identificación del cliente</value>

        [DataMember(Name="tipoIdentificacion")]
        public string TipoIdentificacion { get; set; }

        /// <summary>
        /// Identificación del cliente
        /// </summary>
        /// <value>Identificación del cliente</value>

        [DataMember(Name="identificacion")]
        public string Identificacion { get; set; }

        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>

        [DataMember(Name="nombreCliente")]
        public string NombreCliente { get; set; }

        /// <summary>
        /// ID de la cuenta
        /// </summary>
        /// <value>ID de la cuenta</value>

        [DataMember(Name="idCuenta")]
        public int? IdCuenta { get; set; }

        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>

        [DataMember(Name="numeroCuenta")]
        public string NumeroCuenta { get; set; }

        /// <summary>
        /// Tipo del servicio
        /// </summary>
        /// <value>Tipo del servicio</value>

        [DataMember(Name="tipoServicio")]
        public string TipoServicio { get; set; }

        /// <summary>
        /// ID del operador asignado
        /// </summary>
        /// <value>ID del operador asignado</value>

        [DataMember(Name="idOperador")]
        public int? IdOperador { get; set; }

        /// <summary>
        /// Nombre del operador asignado
        /// </summary>
        /// <value>Nombre del operador asignado</value>

        [DataMember(Name="operador")]
        public string Operador { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetalleProcesoItem {\n");
            sb.Append("  IdProceso: ").Append(IdProceso).Append("\n");
            sb.Append("  Tipo: ").Append(Tipo).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  Fecha: ").Append(Fecha).Append("\n");
            sb.Append("  Notas: ").Append(Notas).Append("\n");
            sb.Append("  TipoIdentificacion: ").Append(TipoIdentificacion).Append("\n");
            sb.Append("  Identificacion: ").Append(Identificacion).Append("\n");
            sb.Append("  NombreCliente: ").Append(NombreCliente).Append("\n");
            sb.Append("  IdCuenta: ").Append(IdCuenta).Append("\n");
            sb.Append("  NumeroCuenta: ").Append(NumeroCuenta).Append("\n");
            sb.Append("  TipoServicio: ").Append(TipoServicio).Append("\n");
            sb.Append("  IdOperador: ").Append(IdOperador).Append("\n");
            sb.Append("  Operador: ").Append(Operador).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DetalleProcesoItem)obj);
        }

        /// <summary>
        /// Returns true if DetalleProcesoItem instances are equal
        /// </summary>
        /// <param name="other">Instance of DetalleProcesoItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetalleProcesoItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdProceso == other.IdProceso ||
                    IdProceso != null &&
                    IdProceso.Equals(other.IdProceso)
                ) && 
                (
                    Tipo == other.Tipo ||
                    Tipo != null &&
                    Tipo.Equals(other.Tipo)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) && 
                (
                    Fecha == other.Fecha ||
                    Fecha != null &&
                    Fecha.Equals(other.Fecha)
                ) && 
                (
                    Notas == other.Notas ||
                    Notas != null &&
                    Notas.Equals(other.Notas)
                ) && 
                (
                    TipoIdentificacion == other.TipoIdentificacion ||
                    TipoIdentificacion != null &&
                    TipoIdentificacion.Equals(other.TipoIdentificacion)
                ) && 
                (
                    Identificacion == other.Identificacion ||
                    Identificacion != null &&
                    Identificacion.Equals(other.Identificacion)
                ) && 
                (
                    NombreCliente == other.NombreCliente ||
                    NombreCliente != null &&
                    NombreCliente.Equals(other.NombreCliente)
                ) && 
                (
                    IdCuenta == other.IdCuenta ||
                    IdCuenta != null &&
                    IdCuenta.Equals(other.IdCuenta)
                ) && 
                (
                    NumeroCuenta == other.NumeroCuenta ||
                    NumeroCuenta != null &&
                    NumeroCuenta.Equals(other.NumeroCuenta)
                ) && 
                (
                    TipoServicio == other.TipoServicio ||
                    TipoServicio != null &&
                    TipoServicio.Equals(other.TipoServicio)
                ) && 
                (
                    IdOperador == other.IdOperador ||
                    IdOperador != null &&
                    IdOperador.Equals(other.IdOperador)
                ) && 
                (
                    Operador == other.Operador ||
                    Operador != null &&
                    Operador.Equals(other.Operador)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdProceso != null)
                    hashCode = hashCode * 59 + IdProceso.GetHashCode();
                    if (Tipo != null)
                    hashCode = hashCode * 59 + Tipo.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                    if (Fecha != null)
                    hashCode = hashCode * 59 + Fecha.GetHashCode();
                    if (Notas != null)
                    hashCode = hashCode * 59 + Notas.GetHashCode();
                    if (TipoIdentificacion != null)
                    hashCode = hashCode * 59 + TipoIdentificacion.GetHashCode();
                    if (Identificacion != null)
                    hashCode = hashCode * 59 + Identificacion.GetHashCode();
                    if (NombreCliente != null)
                    hashCode = hashCode * 59 + NombreCliente.GetHashCode();
                    if (IdCuenta != null)
                    hashCode = hashCode * 59 + IdCuenta.GetHashCode();
                    if (NumeroCuenta != null)
                    hashCode = hashCode * 59 + NumeroCuenta.GetHashCode();
                    if (TipoServicio != null)
                    hashCode = hashCode * 59 + TipoServicio.GetHashCode();
                    if (IdOperador != null)
                    hashCode = hashCode * 59 + IdOperador.GetHashCode();
                    if (Operador != null)
                    hashCode = hashCode * 59 + Operador.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DetalleProcesoItem left, DetalleProcesoItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DetalleProcesoItem left, DetalleProcesoItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
