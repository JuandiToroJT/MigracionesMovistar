/*
 * API Migraciones
 *
 * API para el proyecto de migraciones de movistar a tigo o claro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juand.blandont@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ProyectoMigracionMovistarApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProcesoResumen : IEquatable<ProcesoResumen>
    { 
        /// <summary>
        /// ID del proceso
        /// </summary>
        /// <value>ID del proceso</value>

        [DataMember(Name="idProceso")]
        public int? IdProceso { get; set; }

        /// <summary>
        /// Estado del proceso (PRO, FIN, ERR)
        /// </summary>
        /// <value>Estado del proceso (PRO, FIN, ERR)</value>

        [DataMember(Name="estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Total de registros involucrados
        /// </summary>
        /// <value>Total de registros involucrados</value>

        [DataMember(Name="total")]
        public int? Total { get; set; }

        /// <summary>
        /// Registros migrados con éxito
        /// </summary>
        /// <value>Registros migrados con éxito</value>

        [DataMember(Name="exitosos")]
        public int? Exitosos { get; set; }

        /// <summary>
        /// Registros con error
        /// </summary>
        /// <value>Registros con error</value>

        [DataMember(Name="errores")]
        public int? Errores { get; set; }

        /// <summary>
        /// Registros duplicados
        /// </summary>
        /// <value>Registros duplicados</value>

        [DataMember(Name="duplicados")]
        public int? Duplicados { get; set; }

        /// <summary>
        /// Fecha de finalización del proceso
        /// </summary>
        /// <value>Fecha de finalización del proceso</value>

        [DataMember(Name="fecha")]
        public DateTime? Fecha { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcesoResumen {\n");
            sb.Append("  IdProceso: ").Append(IdProceso).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Exitosos: ").Append(Exitosos).Append("\n");
            sb.Append("  Errores: ").Append(Errores).Append("\n");
            sb.Append("  Duplicados: ").Append(Duplicados).Append("\n");
            sb.Append("  Fecha: ").Append(Fecha).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProcesoResumen)obj);
        }

        /// <summary>
        /// Returns true if ProcesoResumen instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcesoResumen to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcesoResumen other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdProceso == other.IdProceso ||
                    IdProceso != null &&
                    IdProceso.Equals(other.IdProceso)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) && 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    Exitosos == other.Exitosos ||
                    Exitosos != null &&
                    Exitosos.Equals(other.Exitosos)
                ) && 
                (
                    Errores == other.Errores ||
                    Errores != null &&
                    Errores.Equals(other.Errores)
                ) && 
                (
                    Duplicados == other.Duplicados ||
                    Duplicados != null &&
                    Duplicados.Equals(other.Duplicados)
                ) && 
                (
                    Fecha == other.Fecha ||
                    Fecha != null &&
                    Fecha.Equals(other.Fecha)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdProceso != null)
                    hashCode = hashCode * 59 + IdProceso.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Exitosos != null)
                    hashCode = hashCode * 59 + Exitosos.GetHashCode();
                    if (Errores != null)
                    hashCode = hashCode * 59 + Errores.GetHashCode();
                    if (Duplicados != null)
                    hashCode = hashCode * 59 + Duplicados.GetHashCode();
                    if (Fecha != null)
                    hashCode = hashCode * 59 + Fecha.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProcesoResumen left, ProcesoResumen right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProcesoResumen left, ProcesoResumen right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
