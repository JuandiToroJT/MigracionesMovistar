/*
 * API Migraciones
 *
 * API para el proyecto de migraciones de movistar a tigo o claro
 *
 * OpenAPI spec version: 1.0.0
 * Contact: juand.blandont@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ProyectoMigracionMovistarApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatosMigracionManual : IEquatable<DatosMigracionManual>
    { 
        /// <summary>
        /// Identificación del usuario
        /// </summary>
        /// <value>Identificación del usuario</value>

        [DataMember(Name="identificacion")]
        public string Identificacion { get; set; }

        /// <summary>
        /// Número de telefono
        /// </summary>
        /// <value>Número de telefono</value>

        [DataMember(Name="numeroTelefono")]
        public string NumeroTelefono { get; set; }

        /// <summary>
        /// Número de la cuenta
        /// </summary>
        /// <value>Número de la cuenta</value>

        [DataMember(Name="numeroCuenta")]
        public string NumeroCuenta { get; set; }

        /// <summary>
        /// Correo del usuario
        /// </summary>
        /// <value>Correo del usuario</value>

        [DataMember(Name="correo")]
        public string Correo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatosMigracionManual {\n");
            sb.Append("  Identificacion: ").Append(Identificacion).Append("\n");
            sb.Append("  NumeroTelefono: ").Append(NumeroTelefono).Append("\n");
            sb.Append("  NumeroCuenta: ").Append(NumeroCuenta).Append("\n");
            sb.Append("  Correo: ").Append(Correo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatosMigracionManual)obj);
        }

        /// <summary>
        /// Returns true if DatosMigracionManual instances are equal
        /// </summary>
        /// <param name="other">Instance of DatosMigracionManual to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatosMigracionManual other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identificacion == other.Identificacion ||
                    Identificacion != null &&
                    Identificacion.Equals(other.Identificacion)
                ) && 
                (
                    NumeroTelefono == other.NumeroTelefono ||
                    NumeroTelefono != null &&
                    NumeroTelefono.Equals(other.NumeroTelefono)
                ) && 
                (
                    NumeroCuenta == other.NumeroCuenta ||
                    NumeroCuenta != null &&
                    NumeroCuenta.Equals(other.NumeroCuenta)
                ) && 
                (
                    Correo == other.Correo ||
                    Correo != null &&
                    Correo.Equals(other.Correo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identificacion != null)
                    hashCode = hashCode * 59 + Identificacion.GetHashCode();
                    if (NumeroTelefono != null)
                    hashCode = hashCode * 59 + NumeroTelefono.GetHashCode();
                    if (NumeroCuenta != null)
                    hashCode = hashCode * 59 + NumeroCuenta.GetHashCode();
                    if (Correo != null)
                    hashCode = hashCode * 59 + Correo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatosMigracionManual left, DatosMigracionManual right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatosMigracionManual left, DatosMigracionManual right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
